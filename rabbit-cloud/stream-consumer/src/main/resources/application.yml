spring:
  application:
    name: demo-consumer-application
  cloud:
    # Spring Cloud Stream 配置项，对应 BindingServiceProperties 类
    stream:
      # Binder 配置项，对应 BinderProperties Map
      binders:
        rabbit001:
          type: rabbit # 设置 Binder 的类型
          environment: # 设置 Binder 的环境配置
            # 如果是 RabbitMQ 类型的时候，则对应的是 RabbitProperties 类
            spring:
              rabbitmq:
                host: 172.31.2.27 # RabbitMQ 服务的地址
                port: 5672 # RabbitMQ 服务的端口
                username: root # RabbitMQ 服务的账号
                password: root # RabbitMQ 服务的密码
      # Binding 配置项，对应 BindingProperties Map
      bindings:
        demo01-input:
          destination: HELLO-TOPIC-01 # 目的地。这里使用 RabbitMQ Exchange
          content-type: application/json # 内容格式。这里使用 JSON
          group: demo01-consumer-group-DEMO-TOPIC-01 # 消费者分组
          binder: rabbit001  # 设置使用的 Binder 名字
          # 在我们添加了 spring.cloud.stream.bindings.{bindingName} 配置项时，并且是 Input 类型时，每个 RabbitMQ Binding
          # - 【Queue】创建一个 {destination}.{group} 队列，例如这里创建的队列是 DEMO-TOPIC-01.demo01-consumer-group-DEMO-TOPIC-01。
          # - 【Exchange】同时创建的还有类型为 Topic 的 Exchange，并进行绑定。
      # RabbitMQ 自定义 Binding 配置项，对应 RabbitBindingProperties Map
      rabbit:
        bindings:
          demo01-input:
            # RabbitMQ Consumer 配置项，对应 RabbitConsumerProperties 类
            consumer:
              delayed-exchange: true # 是否使用 x-delayed-message 类型的 Exchange，即延迟消息，默认为 false

server:
  port: ${random.int[10000,19999]} # 随机端口，方便启动多个消费者
